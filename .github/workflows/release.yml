name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.VERSION == ''
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "version is: ${{ env.VERSION }}"

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: GSM ${{ env.VERSION }}
          body: |
            # GitHub Secrets Manager (GSM) ${{ env.VERSION }}
            
            ## Download
            
            Choose the appropriate binary for your platform:
            
            - **Linux x86_64**: `gsm-linux-x86_64`
            - **Linux ARM64**: `gsm-linux-aarch64`
            - **macOS x86_64**: `gsm-macos-x86_64`
            - **macOS ARM64**: `gsm-macos-aarch64`
            - **Windows x86_64**: `gsm-windows-x86_64.exe`
            
            ## Installation
            
            1. Download the appropriate binary for your platform
            2. Make it executable (Linux/macOS): `chmod +x gsm-*`
            3. Move to your PATH: `mv gsm-* /usr/local/bin/gsm`
            
            ## What's Changed
            
            See the commits since the last release for details.
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: gsm-linux-x86_64
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: gsm-linux-aarch64
            
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: gsm-macos-x86_64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: gsm-macos-aarch64
            
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: gsm-windows-x86_64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/gsm ${{ matrix.name }}
          strip ${{ matrix.name }}

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/gsm.exe ${{ matrix.name }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  checksums:
    name: Generate Checksums
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Download release assets
        run: |
          # Get release assets
          RELEASE_ID="${{ needs.create-release.outputs.release_id }}"
          mkdir -p ./binaries
          
          # Download each binary
          for asset in gsm-linux-x86_64 gsm-linux-aarch64 gsm-macos-x86_64 gsm-macos-aarch64 gsm-windows-x86_64.exe; do
            curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -o "./binaries/$asset" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets"
          done
        continue-on-error: true

      - name: Generate checksums
        run: |
          cd binaries
          sha256sum * > SHA256SUMS
          md5sum * > MD5SUMS

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./binaries/SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain
        continue-on-error: true

      - name: Upload MD5 checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./binaries/MD5SUMS
          asset_name: MD5SUMS
          asset_content_type: text/plain
        continue-on-error: true 